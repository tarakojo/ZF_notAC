
@article{paulson_1986,
  title    = {Natural deduction as higher-order resolution},
  journal  = {The Journal of Logic Programming},
  volume   = {3},
  number   = {3},
  pages    = {237-258},
  year     = {1986},
  issn     = {0743-1066},
  doi      = {https://doi.org/10.1016/0743-1066(86)90015-4},
  url      = {https://www.sciencedirect.com/science/article/pii/0743106686900154},
  author   = {Lawrence C. Paulson},
  abstract = {An interactive theorem prover, Isabelle, is under development. In lcf, each inference rule is represented by one function for forwards proof and another (a tactic) for backwards proof. In Isabelle, each inference rule is represented by a Horn clause. Resolution gives both forwards and backwards proof, supporting a large class of logics. Isabelle has been used to prove theorems in Martin-Löf's constructive type theory. Quantifiers pose several difficulties: substitution, bound variables, Skolemization. Isabelle's representation of logical syntax is the typed λ-calculus, requiring higher-order unification. It may have potential for logic programming. Depth-first subgoaling along inference rules constitutes a higher-order PROLOG.}
}

@inproceedings{alexiandria,
  author    = {Paulson, Lawrence C.},
  editor    = {Dubois, Catherine
               and Kerber, Manfred},
  title     = {Large-Scale Formal Proof for the Working Mathematician---Lessons Learnt from the ALEXANDRIA Project},
  booktitle = {Intelligent Computer Mathematics},
  year      = {2023},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {3--15},
  abstract  = {ALEXANDRIA is an ERC-funded project that started in 2017, with the aim of bringing formal verification to mathematics. The past six years have seen great strides in the formalisation of mathematics and also in some relevant technologies, above all machine learning. Six years of intensive formalisation activity seem to show that even the most advanced results, drawing on multiple fields of mathematics, can be formalised using the tools available today.},
  isbn      = {978-3-031-42753-4}
}

@article{paulson_cardinal_AC,
  title     = {Mechanizing set theory: Cardinal arithmetic and the Axiom of Choice},
  volume    = {17},
  issn      = {1573-0670},
  url       = {http://dx.doi.org/10.1007/BF00283132},
  doi       = {10.1007/bf00283132},
  number    = {3},
  journal   = {Journal of Automated Reasoning},
  publisher = {Springer Science and Business Media LLC},
  author    = {Paulson,  LawrenceC. and Grabczewski,  Krzysztof},
  year      = {1996},
  month     = dec
}

@inbook{paulson_reflection,
  title     = {The Reflection Theorem: A Study in Meta-theoretic Reasoning},
  isbn      = {9783540456209},
  issn      = {0302-9743},
  url       = {http://dx.doi.org/10.1007/3-540-45620-1_31},
  doi       = {10.1007/3-540-45620-1_31},
  booktitle = {Automated Deduction—CADE-18},
  publisher = {Springer Berlin Heidelberg},
  author    = {Paulson,  Lawrence C.},
  year      = {2002},
  pages     = {377–391}
}

@inbook{paulson_AC_consistency,
  title     = {The Relative Consistency of the Axiom of Choice — Mechanized Using Isabelle/ZF},
  isbn      = {9783540694076},
  url       = {http://dx.doi.org/10.1007/978-3-540-69407-6_52},
  doi       = {10.1007/978-3-540-69407-6_52},
  booktitle = {Logic and Theory of Algorithms},
  publisher = {Springer Berlin Heidelberg},
  author    = {Paulson,  Lawrence C.},
  pages     = {486–490}
} 

@inproceedings{paulson_datatype_impl,
  author    = {Paulson, Lawrence C.},
  editor    = {Bundy, Alan},
  title     = {A fixedpoint approach to implementing (Co)inductive definitions},
  booktitle = {Automated Deduction --- CADE-12},
  year      = {1994},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {148--161},
  abstract  = {This paper presents a fixedpoint approach to inductive definitions. Instead of using a syntactic test such as `strictly positive,' the approach lets definitions involve any operators that have been proved monotone. It is conceptually simple, which has allowed the easy implementation of mutual recursion and other conveniences. It also handles coinductive definitions: simply replace the least fixedpoint by a greatest fixedpoint. This represents the first automated support for coinductive definitions.},
  isbn      = {978-3-540-48467-7}
}

@inbook{paulson_datatype,
  author    = {Plotkin, Gordon and Stirling, Colin P. and Tofte, Mads},
  booktitle = {Proof, Language, and Interaction: Essays in Honour of Robin Milner},
  title     = {A Fixedpoint Approach to (Co)Inductive and (Co)Datatype Definitions},
  year      = {2000},
  volume    = {},
  number    = {},
  pages     = {187-211},
  keywords  = {},
  doi       = {}
} 

@article{gunther_forcing,
  author  = {Emmanuel Gunther and Miguel Pagano and Pedro Sánchez Terraf},
  title   = {Formalization of Forcing in Isabelle/ZF},
  journal = {Archive of Formal Proofs},
  month   = {May},
  year    = {2020},
  note    = {\url{https://isa-afp.org/entries/Forcing.html},
             Formal proof development},
  issn    = {2150-914x}
}

@article{gunther_independence,
  author  = {Emmanuel Gunther and Miguel Pagano and Pedro Sánchez Terraf and Matías Steinberg},
  title   = {The Independence of the Continuum Hypothesis in Isabelle/ZF},
  journal = {Archive of Formal Proofs},
  month   = {March},
  year    = {2022},
  note    = {\url{https://isa-afp.org/entries/Independence_CH.html},
             Formal proof development},
  issn    = {2150-914x}
}

@inproceedings{flypitch,
  author    = {Jesse Michael Han and
               Floris van Doorn},
  title     = {A formal proof of the independence of the continuum hypothesis},
  booktitle = {Proceedings of the 9th {ACM} {SIGPLAN} International Conference on
               Certified Programs and Proofs, {CPP} 2020, New Orleans, LA, {USA}, January
               20-21, 2020},
  year      = {2020},
  crossref  = {DBLP:conf/cpp/2020},
  biburl    = {https://dblp.org/rec/bib/conf/cpp/HanD20},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{kunen2011,
  title     = {Set Theory},
  author    = {Kunen, Kenneth},
  publisher = {College Publications},
  month     = nov,
  year      = 2011,
  address   = {London, England}
}

@misc{NF_consistency,
  author = {M. Randall Holmes and Sky Wilshaw},
  title  = {NF is Consistent},
  year   = {2024},
  eprint = {arXiv:1503.01406}
}

@book{jech_AC,
  title     = {The axiom of choice},
  author    = {Jech, Thomas J},
  publisher = {Dover Publications},
  series    = {Dover Books on Mathematics},
  month     = jul,
  year      = 2008,
  address   = {Mineola, NY}
}

@book{jech_set_theory,
  title     = {Set Theory},
  author    = {Jech, Thomas J},
  publisher = {Springer},
  series    = {Springer Monographs in Mathematics},
  edition   = 3,
  month     = oct,
  year      = 2002,
  address   = {Berlin, Germany},
  language  = {en}
}

@misc{karagila,
  title = {Lecture Notes: Forcing \& Symmetric Extensions},
  year  = {2023},
  url   = {https://karagila.org/files/Forcing-2023.pdf},
  note  = {Accessed: 2024-10-29}
}

@article{seL4, 
author = {Klein, Gerwin and Derrin, Philip and Elphinstone, Kevin},
title = {Experience report: seL4: formally verifying a high-performance microkernel},
year = {2009},
issue_date = {September 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/1631687.1596566},
doi = {10.1145/1631687.1596566},
abstract = {We report on our experience using Haskell as an executable specification language in the formal verification of the seL4 microkernel. The verification connects an abstract operational specification in the theorem prover Isabelle/HOL to a C implementation of the microkernel. We describe how this project differs from other efforts, and examine the effect of using Haskell in a large-scale formal verification. The kernel comprises 8,700 lines of C code; the verification more than 150,000 lines of proof script.},
journal = {SIGPLAN Not.},
month = aug,
pages = {91–96},
numpages = {6},
keywords = {Isabelle/HOL, haskell, microkernel, seL4}
}